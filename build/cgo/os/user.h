/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "user.go"

#include <stdlib.h>

typedef struct {
  char* gid;
  char* name;
  char* error;
} user_group_t;

typedef struct {
  char* uid;
  char* gid;
  char* username;
  char* name;
  char* home_dir;
  char* error;
} user_t;

typedef struct {
  size_t length;
  char** buffer;
  char* error;
} user_group_ids_t;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) user_group_t* user_lookup_group(char* name);
extern __declspec(dllexport) user_group_t* user_lookup_group_id(char* gid);
extern __declspec(dllexport) user_t* user_current();
extern __declspec(dllexport) user_t* user_lookup(char* username);
extern __declspec(dllexport) user_t* user_lookup_id(char* uid);
extern __declspec(dllexport) user_group_ids_t* user_group_ids(user_t* user);
extern __declspec(dllexport) void user_clean(user_t* self);
extern __declspec(dllexport) void user_group_clean(user_group_t* self);
extern __declspec(dllexport) void user_group_ids_clean(user_group_ids_t* self);

#ifdef __cplusplus
}
#endif
